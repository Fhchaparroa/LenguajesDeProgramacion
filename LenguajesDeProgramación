import re

# Define una lista de palabras reservadas en minúsculas
palabras_reservadas = [
    "escriba", 
    "mientras", 
    "lea", 
    "o", 
    "real", 
    "y", 
    "nueva_linea", 
    "haga", 
    "repita", 
    "entonces", 
    "inicio", 
    "fin"
]

# Define un diccionario para mapear símbolos y operadores a sus nombres de token
mapeo_simbolos = {
    '<-': 'assign',
    '.': 'period',
    ',': 'comma',
    ':': 'colon',
    ']': 'closing_bra',
    '[': 'opening_bra',
    ')': 'closing_par',
    '(': 'opening_par',
    '+': 'plus',
    '-': 'minus',
    '*': 'times',
    '/': 'div',
    '^': 'power',
    '=': 'equal',
    '<>': 'neq',
    '<': 'less',
    '<=': 'leq',
    '>': 'greater',
    '>=': 'geq'
}

# Inicializar el número de línea
num_linea = 1

# Ciclo para ingresar múltiples líneas de texto
while True:
    # Solicitar entrada al usuario
    entrada = input("Ingrese una cadena de texto: ").lower()

    # Variables para seguimiento de errores léxicos
    posicion_actual = 0

    # Intentar encontrar un token válido desde la posición actual
    match = re.match(r"[a-zA-Z_]\w*|\"[^\"]*\"|\S+", entrada[posicion_actual:])
    print(match, "match")
    if match:
        token = match.group()
        inicio = posicion_actual + match.start() + 1  # +1 para compensar la indexación de Python
        fin = posicion_actual + match.end()

        # Identificar si el token es una palabra reservada (en minúsculas)
        if token in palabras_reservadas:
            print(f"<palabra_reservada,{num_linea},{inicio}>")
        elif token in mapeo_simbolos:
            nombre_token = mapeo_simbolos[token]
            print(f"<tkn_{nombre_token},{num_linea},{inicio}>")
        elif re.match(r'"[^"]*"', token):  # Token es una cadena
            print(f"<tkn_str,{token},{num_linea},{inicio}>")
        else:
            # Error léxico
            print(f">>> Error lexico (linea: {num_linea}, posicion: {inicio})")

        # Actualizar la posición actual
        posicion_actual = fin
    else:
        # Si no se encuentra un token válido, marcar un error léxico y avanzar
        print(f">>> Error lexico (linea: {num_linea}, posicion: {posicion_actual + 1})")
        posicion_actual += 1

    # Incrementar el número de línea
    num_linea += 1